enum ElevatorID {
    Left = 0,
    Right = 1
}

fn elevator_id_to_string(id: ElevatorID) -> str {
    switch id {
        ElevatorID.Left -> "Left",
        ElevatorID.Right -> "Right"
    }
}

template Elevators(id: ElevatorID) {
    let name = format("Elevator_{}", elevator_id_to_string(id));

    component name on name {
        animation name {
            length: 100,
            lag: 50,
            value: @{
                let value = @"A:ELEVATOR DEFLECTION PCT, percent over 100";
                value * 0.5 + 0.5
            }
        }

        visibility @{
            if @"L:ElevatorsInvisible, Bool" {
                true
            } else if false {
                false
            } else {
                false
            }
        }

        interaction {
            legacy_cursors: Cursor.Hand,
            lock_cursors: Cursor.Hand,
            legacy_events: [MouseEvent.LeftSingle],
            lock_events: [MouseEvent.LeftSingle],
            legacy_callback: @{
                @"L:ElevatorsInvisible, Bool" = !@"L:ElevatorsInvisible, Bool"
            },
            lock_callback: @{
                @"L:ElevatorsInvisible, Bool" = !@"L:ElevatorsInvisible, Bool"
            },
            tooltip_title: @{ "Interactable Elevators" },
            lock_tooltips: ["MyInputEvent"],
            animated_tooltips: [none],
            can_lock: false,
            cursor_animated: false,
            drag_mode: NormalDrag {
                axis: Axis.Any,
                scalar: 1.0
            }
        }

        events name = [
            Event {
                time: 0.1,
                direction: Direction.Forward,
                sounds: [
                    "MySound",
                    "SomeOtherSound"
                ]
            },
            Event {
                time: 0.5,
                direction: Direction.Forward,
                effects: [
                    "ElevatorPuffEffect"
                ]
            }
        ]

        update {
            mode: Interaction.Both,
            frequency: 0.1,
            do: @{
                @"L:ThisIsAlwaysZero" = 0;
            }
        }

        inputevent "MyInputEvent" {
            legacy_icon: Icon.Push,
            lock_icon: Icon.Push,
            description: @{ "This is my Input Event" },
            tooltip_value: @{
                if @"O:InputEventValue, Bool" { "On" } else { "Off" }
            },
            legacy_interaction: [InteractionTip.PrimaryDown],
            lock_interaction: @{
                "This is a custom interaction message"
            },
            value: @{ @"O:InputEventValue, Bool" },
            units: "Bool",
            init: @{ @"O:InputEventValue, Bool" = false },
            watch: ["A:SomeSimVar", "L:SomeLocalVar"],
            inc: Setter {
                set: @{ @"B:MyInputEvent_Set" = @"B:MyInputEvent" + p0 },
                bindings: [Binding {
                    alias: "MyInputEvent_IncrementByOne",
                    param: @{ 1 }
                }]
            },
            dec: Setter {

                set: @{ @"B:MyInputEvent_Set" = @"B:MyInputEvent" - p0 },
                bindings: [Binding {
                    alias: "MyInputEvent_DecrementByOne",
                    param: @{ 1 }
                }]
            },
            set: Setter {
                set: @{ @"O:InputEventValue" = p0 },
                bindings: [none]
            }
        }
    }
}
