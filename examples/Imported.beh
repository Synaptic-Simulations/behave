enum ElevatorID {
    Left = 0,
    Right = 1
}

fn elevator_id_to_string(id: ElevatorID) -> str {
    switch id {
        ElevatorID.Left -> "Left",
        ElevatorID.Right -> "Right"
    }
}

template Elevators(id: ElevatorID) {
    let name = format("Elevator_{}", elevator_id_to_string(id));

    component name on name {
        animation name {
            length: 100,
            lag: 50,
            value: rpn fn() {
                let value = (A:"ELEVATOR DEFLECTION PCT, percent over 100");
                value * 0.5 + 0.5
            }
        }

        visibility = rpn fn(){
            if (L:"ElevatorsInvisible", bool) {
                true
            } else if false {
                false
            } else {
                false
            }
        }

        interaction {
            legacy_cursors: Cursor.Hand,
            lock_cursors: Cursor.Hand,
            legacy_events: [MouseEvent.LeftSingle],
            lock_events: [MouseEvent.LeftSingle],
            legacy_callback: rpn fn() {
                (L:"ElevatorsInvisible", bool) = !(L:"ElevatorsInvisible", bool)
            },
            lock_callback: rpn fn() {
                (L:"ElevatorsInvisible", bool) = !(L:"ElevatorsInvisible", bool)
            },
            tooltip_title: rpn fn() { "Interactable Elevators" },
            lock_tooltips: ["MyInputEvent"],
            animated_tooltips: [],
            can_lock: false,
            cursor_animated: false,
            drag_mode: NormalDrag {
                axis: Axis.Any,
                scalar: 1.0
            }
        }

        events on name = [
            Event {
                time: 0.1,
                direction: Direction.Forward,
                sounds: [
                    "MySound",
                    "SomeOtherSound"
                ]
            },
            Event {
                time: 0.5,
                direction: Direction.Forward,
                effects: [
                    "ElevatorPuffEffect"
                ]
            }
        ]

        update {
            mode: Interaction.Both,
            frequency: 0.1,
            do: rpn fn() {
                (L:"ThisIsAlwaysZero") = 0;
            }
        }

        inputevent "MyInputEvent" {
            legacy_icon: Icon.Push,
            lock_icon: Icon.Push,
            description: rpn fn() { "This is my Input Event" },
            tooltip_value: rpn fn() {
                if (O:"InputEventValue", bool) { "On" } else { "Off" }
            },
            legacy_interaction: [InteractionTip.PrimaryDown],
            lock_interaction: rpn fn() {
                "This is a custom interaction message"
            },
            value: rpn fn() { (O:"InputEventValue", bool) },
            units: "Bool",
            init: rpn fn (){ (O:"InputEventValue", bool) = false },
            watch: ["A:SomeSimVar", "L:SomeLocalVar"],
            inc: Setter {
                set: rpn fn(value) { (B:"MyInputEvent_Set") = (B:"MyInputEvent") + value },
                bindings: [Binding {
                    alias: "MyInputEvent_IncrementByOne",
                    param: rpn fn(_) { 1 }
                }]
            },
            dec: Setter {
                set: rpn fn(value) { (B:"MyInputEvent_Set") = (B:"MyInputEvent") - p0 },
                bindings: [Binding {
                    alias: "MyInputEvent_DecrementByOne",
                    param: rpn fn(_) { 1 }
                }]
            },
            set: Setter {
                set: rpn fn() { (O:"InputEventValue") = p0 },
                bindings: []
            }
        }
    }
}
