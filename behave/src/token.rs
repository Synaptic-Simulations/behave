use std::ops::Range;

use crate::diagnostic::Diagnostic;

#[derive(Clone, Debug)]
pub enum TokenType {
	Ident(String),
	Number(f64),
	String(String),
	Boolean(bool),
	Diagnostic(Diagnostic),
	Whitespace,
	Comment,
	QuestionMark,
	At,
	Colon,
	Period,
	Comma,
	Semicolon,
	Pipe,
	LeftBracket,
	RightBracket,
	LeftBrace,
	RightBrace,
	LeftParen,
	RightParen,
	LeftChevron,
	LeftChevronEqual,
	RightChevron,
	RightChevronEqual,
	Equal,
	DoubleEqual,
	Arrow,
	Bang,
	BangEqual,
	Percent,
	PercentEqual,
	Plus,
	PlusEqual,
	Minus,
	MinusEqual,
	Star,
	StarEqual,
	Slash,
	SlashEqual,
	And,
	Or,
	Not,
	If,
	Is,
	Else,
	While,
	For,
	Import,
	Str,
	Code,
	Num,
	Bool,
	Struct,
	Enum,
	Function,
	Return,
	Break,
	Switch,
	Let,
	Alias,
	None,
	Lods,
	Behavior,
	Template,
	Use,
	Extern,
}

#[derive(Clone, Debug)]
pub struct Token(pub TokenType, pub Range<usize>);

impl Token {
	pub fn to_type(&self) -> &'static str {
		use TokenType::*;

		match self.0 {
			Ident(_) => "ident",
			Number(_) => "number",
			String(_) => "string",
			Boolean(_) => "boolean",
			Diagnostic(_) => unreachable!(),
			Whitespace => unreachable!(),
			Comment => unreachable!(),
			QuestionMark => "?",
			At => "at",
			Colon => "colon",
			Period => "period",
			Comma => "comma",
			Semicolon => "semicolon",
			Pipe => "|",
			LeftBracket => "[",
			RightBracket => "]",
			LeftBrace => "{",
			RightBrace => "}",
			LeftParen => "(",
			RightParen => ")",
			LeftChevron => "<",
			LeftChevronEqual => "<=",
			RightChevron => ">",
			RightChevronEqual => ">=",
			Equal => "=",
			DoubleEqual => "==",
			Arrow => "=>",
			Bang => "!",
			BangEqual => "!=",
			Percent => "%",
			PercentEqual => "%=",
			Plus => "+",
			PlusEqual => "+=",
			Minus => "-",
			MinusEqual => "-=",
			Star => "*",
			StarEqual => "*=",
			Slash => "/",
			SlashEqual => "/=",
			And => "and",
			Or => "or",
			Not => "not",
			If => "if",
			Is => "is",
			Else => "else",
			While => "while",
			For => "for",
			Import => "import",
			Str => "str",
			Code => "code",
			Num => "num",
			Bool => "bool",
			Struct => "struct",
			Enum => "enum",
			Function => "fn",
			Return => "return",
			Break => "break",
			Switch => "switch",
			Let => "let",
			Alias => "alias",
			None => "none",
			Lods => "lods",
			Behavior => "behavior",
			Template => "template",
			Use => "use",
			Extern => "extern",
		}
	}
}
